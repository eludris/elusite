---
import Base from '../../layouts/Base.astro';
import { getCollection } from 'astro:content';

export const getStaticPaths = async () => {
  const entries = await getCollection('blog');
  return entries.map((entry) => ({ params: { slug: entry.slug }, props: { entry } }));
};

const { entry } = Astro.props;
const {
  Content,
  remarkPluginFrontmatter: { minutesRead, words }
} = await entry.render();
---

<Base title={`Eludris Blog | ${entry.data.title}`} description={entry.data.description}>
  <main>
    <article>
      <div id="head">
        {
          entry.data.heroImage && (
            <img width={720} height={360} src={entry.data.heroImage} alt="hero image" />
          )
        }
        <h1 class="title">{entry.data.title}</h1>
        <p>{entry.data.description}</p>
        {entry.data.pubDate && entry.data.author && <hr />}
        {
          entry.data.pubDate && (
            <span>
              Published on <time>{entry.data.pubDate}</time>
            </span>
          )
        }
        {entry.data.pubDate && entry.data.author && <span>|</span>}
        {entry.data.author && <span>{`Authored by ${entry.data.author}`}</span>}
        {
          entry.data.updatedDate && (
            <div>
              Last updated on <time>{entry.data.updatedDate}</time>
            </div>
          )
        }
        <span>|</span>
        {minutesRead} - {words} words
      </div>
      <Content />
    </article>
  </main>
</Base>

<style>
  #head {
    text-align: center;
    margin: 10px;
  }

  main {
    margin: 10px auto;
    padding: 1em;
    width: 60vw;
    min-height: 100vh;
  }

  @media only screen and (max-width: 1200px) {
    #head {
      margin: 0;
    }
    main {
      margin: 5px auto;
      padding: 10px;
      width: calc(100vw - 20px);
    }
  }

  :global(.astro-code) {
    padding: 10px;
    border-radius: 10px;
    margin-left: 10px;
  }

  :global(.header) {
    display: block;
    position: relative;
  }

  :global(.header > a) {
    display: inline;
    position: absolute;
    left: -25px;
    bottom: 2px;
    opacity: 0;
    border: unset;
    border: unset;
    transition: opacity ease-in-out 75ms;
  }

  :global(.link-icon) {
    color: inherit;
  }

  :global(.link-icon:hover) {
    color: var(--gray-300);
  }

  :global(.header:hover > a) {
    opacity: 1;
  }

  :global(li) {
    padding: 3px;
  }

  :global(ul) {
    padding-left: 20px;
  }

  :global(article pre, pre[class*='language-'][class*='language-']) {
    width: calc(100% - 40px);
    background-color: var(--gray-200);
    padding: 20px;
    margin: 0;
    border-radius: 10px;
  }

  :global(article code, code[class*='language-'][class*='language-']) {
    width: 100%;
    background-color: var(--gray-200);
    font-size: 18px;
  }

  :global(article pre code, pre code[class*='language-'][class*='language-']) {
    background-color: transparent;
  }

  :global(article *) {
    word-wrap: break-word;
  }

  :global(article blockquote) {
    border-left: 5px solid var(--gray-400);
    padding-left: 25px;
    margin-left: 5px;
  }
</style>
